/**
  kP: steps of 0.1, with a minimum value set to 0.
  kI: steps of 0.005, with a minimum value set to 0.
  kD: steps of 1, with a maximum value set to 0.

*/

function PID(kP, kI, kD, target) {
  this.kP = kP || 1;
  this.kI = kI || 0;
  this.kD = kD || 0;
  this.target = target || 0;
  this.value = 0;
  this.error = {
    sum: 0,
    last: 0,
    time: 0
  };
}

PID.prototype.update = function(value) {
  this.value = value;

  var error = this.target - this.value;
  var diff = error - this.error.last;

  this.error.sum = this.error.sum + error;
  this.error.last = error;

  return (this.kP * error) + (this.kI * this.error.sum) + (this.kD * diff);
};
